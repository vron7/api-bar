{"version":3,"sources":["containers/App.js","components/Button.js","components/Buttons.js","components/SpeechBubble.js","components/Barman.js","components/ErrorBoundry.js","topics.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["user","colors","Button","idButton","idx","id","name","getSomething","className","href","onClick","Buttons","buttons","map","button","i","key","SpeechBubble","text","isWaiting","el","document","querySelector","classList","add","fadeOutbubble","remove","offsetWidth","reanimateBubble","search","src","Barman","alt","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","enumTopics","topics","requestWisdom","topic","dispatch","console","log","type","fetch","getUriForTopic","then","response","json","data","joke","setup","delivery","en","author","file","convertDataToWisdom","payload","catch","App","onRequestRobots","robots","isPending","onRequestWisdom","wisdom","length","Math","floor","random","React","connect","requestRobots","params","Boolean","window","location","hostname","match","initialStateRobots","initialStateWisdom","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.91310989.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport Buttons from '../components/Buttons';\r\nimport Barman from '../components/Barman';\r\nimport SpeechBubble from '../components/SpeechBubble';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\nimport {topics} from '../topics'\r\nimport { requestRobots, requestJokes, requestWisdom } from '../actions'\r\nlet user;\r\n\r\nconst mapStateToProps = state => {\r\n    console.log('dbg mapStateToProps', state)\r\n    return {\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n        wisdom: state.requestWisdom.wisdom,\r\n        isWaiting: state.requestWisdom.isWaiting,\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRequestRobots: () => dispatch(requestRobots()),\r\n        onRequestWisdom: params => dispatch(requestWisdom(params))\r\n    }\r\n}\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()        \r\n    }\r\n\r\n    render(){\r\n        console.log('render app, props:', this.props)\r\n        const { robots, isPending, onRequestWisdom, wisdom, isWaiting } = this.props;\r\n        if(robots.length && !user)\r\n            user = robots[Math.floor(Math.random() * robots.length)];        \r\n        return (isPending || !user) ?\r\n            <h1 className='tc'>Loading...</h1> :\r\n            (\r\n                <div className='tc '>\r\n                    <h1 className='f1'>API-bar</h1>\r\n                    <div className=\"tc bg-light-green br3 pa3 ma2 bw2 shadow-5\">\r\n                        <ErrorBoundry>\r\n                        <SpeechBubble text={wisdom} name={user.name} isWaiting={isWaiting} />\r\n                        <Barman id={user.id} />\r\n                        </ErrorBoundry>\r\n                    </div>   \r\n                    <Buttons \r\n                        buttons={topics}\r\n                        onClick={onRequestWisdom} \r\n                    />             \r\n                    \r\n                </div>\r\n            )\r\n        \r\n\r\n    }\r\n}\r\n\r\n// Connecting App to redux Store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nconst colors = [\"light-purple\", \"gold\", \"hot-pink\", \"orange\"];\r\n\r\nconst Button = ({idx, id, name, getSomething}) => {\r\n    const bgColor = colors[idx] ? colors[idx] : \"hot-pink\"\r\n    const className = `f6 link ma1 dim br3 ph3 pv2 mb2 dib white shadow-3 bg-${bgColor}`\r\n    const handleClick = ((idButton) => () => getSomething(idButton));\r\n    return(\r\n        <a href=\"#0\" className={className} onClick={handleClick(id)} >\r\n            {name}\r\n        </a>      \r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Buttons = ({buttons, onClick}) => {\r\n    return(\r\n        <div className=\"tc bg-washed-yellow br3 pa3 ma2 bw2 shadow-5\">{\r\n            buttons.map((button, i) => {\r\n                return (\r\n                    <Button \r\n                        key={i}\r\n                        idx={i}\r\n                        name={button.name}\r\n                        id={button.id}\r\n                        getSomething={onClick} \r\n                        />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\n\r\nconst reanimateBubble = () => {\r\n    const el = document.querySelector(\".bubble\");\r\n    if(!el)\r\n        return\r\n\r\n    el.classList.remove(\"scale-up-center\");\r\n    el.classList.remove(\"scale-out-center\");\r\n    void el.offsetWidth;\r\n    el.classList.add(\"scale-up-center\");\r\n}\r\nconst fadeOutbubble = () =>{\r\n    const el = document.querySelector(\".bubble\");\r\n    if(!el)\r\n        return\r\n    el.classList.add(\"scale-out-center\"); \r\n}\r\nconst SpeechBubble = ({text, name, isWaiting}) => { //destructing\r\n    let className = \"bubble chat-box br4 pa3 bg-white shadow-3\"\r\n\r\n    if(isWaiting){\r\n        fadeOutbubble();\r\n    }  else{\r\n        reanimateBubble();\r\n    }\r\n  \r\n    if(text.search(\"purr\") !== -1){\r\n        return(\r\n            <img className=\"bubble-img shadow-3\" src={text}/>\r\n        )\r\n    }\r\n    \r\n    if(text) {        \r\n        return(\r\n            <div className={className}>\r\n                <p>{text}</p>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className={className}>\r\n            <p>Hi stranger!<br/>My name is <strong>{name}</strong> and I'm honored to be your host today.<br/> How can I entertain you ?</p>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SpeechBubble;\r\n","import React from 'react';\r\nimport SpeechBubble from './SpeechBubble';\r\n\r\nconst Barman = ({id}) => { //destructing\r\n    return(\r\n        <div className=\"tc\">\r\n            <img className=\"barman\" alt='avatar' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div className=\"bar-top\">\r\n                <div className=\"beer\"></div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Barman;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }    \r\n}\r\nexport default ErrorBoundry;","const enumTopics = {\r\n    JOKE: 'joke',\r\n    QUOTE: 'quote',\r\n    FACTS: 'facts',\r\n    CATS: 'cats',\r\n    INSULT: 'insult'\r\n\r\n}\r\nexport const topics = [\r\n    {\r\n        id: enumTopics.JOKE, \r\n        name:\"Joke\"\r\n    },\r\n    {\r\n        id: enumTopics.QUOTE,\r\n        name:\"Programming\"\r\n    },\r\n    {\r\n        id: enumTopics.FACTS,\r\n        name: 'Fact'\r\n    },\r\n    {\r\n        id: enumTopics.CATS,\r\n        name: 'Meow'\r\n    },\r\n    {\r\n        id: enumTopics.INSULT,\r\n        name: 'Cat image'\r\n    }\r\n];\r\n\r\nexport const getUriForTopic = (topic) => {\r\n    console.log('dbg get uri for topic', topic);\r\n    switch(topic){\r\n        case enumTopics.JOKE:\r\n            return 'https://sv443.net/jokeapi/v2/joke/Any';\r\n\r\n        case enumTopics.QUOTE:\r\n            return 'https://programming-quotes-api.herokuapp.com/quotes/random';\r\n\r\n\r\n        case enumTopics.FACTS:\r\n            return 'https://uselessfacts.jsph.pl/random.json?language=en';\r\n\r\n        case enumTopics.CATS:\r\n            return 'https://meowfacts.herokuapp.com/';\r\n\r\n        case enumTopics.INSULT:\r\n            return 'https://aws.random.cat/meow';\r\n\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nexport const convertDataToWisdom = (topic, data) => {\r\n    console.log('dbg data to wisdom', topic, data);\r\n    switch(topic){\r\n        case enumTopics.JOKE:\r\n            return data.type === 'single' ? data.joke : data.setup + ' ' + data.delivery;\r\n\r\n        case enumTopics.QUOTE:\r\n            return data.en + \" - \" + data.author;\r\n    \r\n\r\n        case enumTopics.FACTS:\r\n            return data.text;\r\n\r\n        case enumTopics.CATS:\r\n            return data.data[0];\r\n\r\n        case enumTopics.INSULT:\r\n            return data.file;\r\n\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n","import { \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_TOPIC_PENDING,\r\n    REQUEST_TOPIC_SUCCESS,\r\n    REQUEST_TOPIC_FAILED,\r\n} from './constants'\r\nimport {getUriForTopic, convertDataToWisdom} from './topics'\r\n\r\n\r\n// Thunk is looking for a function instead of an action(object)\r\n// The inner function receives the store methods dispatch and getState as parameters.\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}\r\n\r\nexport const requestWisdom = (topic) => (dispatch) => {\r\n    console.log('dbg request wisdom', topic);\r\n    dispatch({type: REQUEST_TOPIC_PENDING});\r\n    fetch(getUriForTopic(topic))\r\n        .then(response => response.json())\r\n        .then(data => convertDataToWisdom(topic, data))\r\n        .then(data => {\r\n            console.log('dbg after convert', data);\r\n            dispatch({type:REQUEST_TOPIC_SUCCESS, payload:data})\r\n        })\r\n        .catch(error => dispatch({type:REQUEST_TOPIC_FAILED, payload:error}))\r\n}\r\n\r\n","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\nexport const REQUEST_TOPIC_PENDING = 'REQUEST_TOPIC_PENDING';\r\nexport const REQUEST_TOPIC_SUCCESS = 'REQUEST_TOPIC_SUCCESS';\r\nexport const REQUEST_TOPIC_FAILED = 'REQUEST_TOPIC_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_TOPIC_PENDING,\r\n    REQUEST_TOPIC_SUCCESS,\r\n    REQUEST_TOPIC_FAILED\r\n\r\n} from './constants'\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending:true});\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateWisdom = {\r\n    isWaiting: false,\r\n    wisdom: '',\r\n    error: ''\r\n}\r\n\r\nexport const requestWisdom = (state = initialStateWisdom, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_TOPIC_PENDING:\r\n            return Object.assign({}, state, {isWaiting:true});\r\n\r\n        case REQUEST_TOPIC_SUCCESS:\r\n            return Object.assign({}, state, {wisdom: action.payload, isWaiting: false});\r\n\r\n        case REQUEST_TOPIC_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isWaiting: false});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { requestWisdom, requestRobots } from './reducers'\nimport 'tachyons';\n\n// create logging middleware\nconst logger = createLogger();\n\n//combine reducers\nconst rootReducer = combineReducers({ requestWisdom, requestRobots})\n\n// store holds state tree of the application\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  // Provider takes care of providing the store to all components in the tree\n  <Provider store={store}>\n    <App/>\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}