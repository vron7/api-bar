{"version":3,"sources":["components/Button.js","components/Buttons.js","topics.js","components/SpeechBubble.js","components/Barman.js","components/ErrorBoundry.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["colors","Button","idButton","idx","id","name","getSomething","className","href","onClick","Buttons","buttons","map","button","i","key","enumTopics","topics","wisdomFormat","Wisdom","data","format","this","getCurrentDate","dt","Date","getFullYear","getMonth","slice","getDate","convertDataToWisdom","topic","console","log","type","joke","setup","delivery","en","author","text","file","error","today","dates","countries","Estonia","new","today_new_confirmed","died","today_new_deaths","recovered","today_new_recovered","convertCovidData","SHOW_LOADER","SpeechBubble","content","isWaiting","isLoaded","onResourceLoaded","classNameLoader","classNameImg","src","onLoad","Barman","alt","ErrorBoundry","props","state","hasError","info","setState","children","Component","requestUsers","dispatch","fetch","then","response","json","user","Math","floor","random","length","randomUser","payload","catch","requestWisdom","getUriForTopic","App","onRequestUsers","isPending","onRequestWisdom","wisdom","React","connect","resourceLoaded","params","Boolean","window","location","hostname","match","initialStateUser","initialStateWisdom","initialLoaded","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ed43e449.chunk.js","sourcesContent":["import React from 'react';\r\nconst colors = [\"light-purple\", \"gold\", \"hot-pink\", \"orange\", 'green', 'dark-gray'];\r\n\r\nconst Button = ({idx, id, name, getSomething}) => {\r\n    const bgColor = colors[idx] ? colors[idx] : \"hot-pink\"\r\n    const className = `f6 link ma1 dim br3 ph3 pv2 mb2 dib white shadow-3 bg-${bgColor}`\r\n    const handleClick = ((idButton) => () => getSomething(idButton));\r\n    return(\r\n        <a href=\"#0\" className={className} onClick={handleClick(id)} >\r\n            {name}\r\n        </a>      \r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Buttons = ({buttons, onClick}) => {\r\n    return(\r\n        <div className=\"tc bg-washed-yellow br3 pa3 ma2 bw2 shadow-5\">{\r\n            buttons.map((button, i) => {\r\n                return (\r\n                    <Button \r\n                        key={i}\r\n                        idx={i}\r\n                        name={button.name}\r\n                        id={button.id}\r\n                        getSomething={onClick} \r\n                        />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;\r\n","import userEvent from \"@testing-library/user-event\";\r\n\r\nconst enumTopics = {\r\n    JOKE: 'joke',\r\n    QUOTE: 'quote',\r\n    FACTS: 'facts',\r\n    CATS: 'cats',\r\n    CAT_IMG: 'cat_img',\r\n    COVID: 'covid'\r\n\r\n}\r\nexport const topics = [\r\n    {\r\n        id: enumTopics.JOKE, \r\n        name:\"Joke\"\r\n    },\r\n    {\r\n        id: enumTopics.QUOTE,\r\n        name:\"Dev\"\r\n    },\r\n    {\r\n        id: enumTopics.FACTS,\r\n        name: 'Fact'\r\n    },\r\n    {\r\n        id: enumTopics.CATS,\r\n        name: 'Meow'\r\n    },\r\n    {\r\n        id: enumTopics.CAT_IMG,\r\n        name: 'Cat pic'\r\n    },\r\n    {\r\n        id: enumTopics.COVID,\r\n        name: 'Covid'\r\n    }\r\n];\r\n\r\nexport const getUriForTopic = (topic) => {\r\n    console.log('dbg get uri for topic', topic);\r\n    switch(topic){\r\n        case enumTopics.JOKE:\r\n            return 'https://sv443.net/jokeapi/v2/joke/Any';\r\n\r\n        case enumTopics.QUOTE:\r\n            return 'https://programming-quotes-api.herokuapp.com/quotes/random';\r\n\r\n\r\n        case enumTopics.FACTS:\r\n            return 'https://uselessfacts.jsph.pl/random.json?language=en';\r\n\r\n        case enumTopics.CATS:\r\n            return 'https://meowfacts.herokuapp.com/';\r\n\r\n        case enumTopics.CAT_IMG:\r\n            return 'https://aws.random.cat/meow';\r\n\r\n        case enumTopics.COVID:\r\n            return `https://api.covid19tracking.narrativa.com/api/${getCurrentDate()}/country/estonia`;\r\n\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nexport const wisdomFormat = {\r\n    TEXT: 'text',\r\n    IMAGE: 'image',\r\n    INITIAL: 'initial',\r\n    COVID_TEXT: 'covid-text',\r\n}\r\n\r\nexport const initTopic = (name) => {\r\n    const data = name;\r\n    const format = wisdomFormat.INITIAL \r\n    return new Wisdom(data, format)\r\n}\r\n\r\nfunction Wisdom (data, format) {\r\n    this.data = data;\r\n    this.format = format;\r\n}\r\nfunction getCurrentDate() {\r\n    var dt = new Date();\r\n    return dt.getFullYear() + \"-\" + \r\n        ('0' + (dt.getMonth() + 1)).slice(-2) + \"-\" + \r\n        ('0' + dt.getDate()).slice(-2);\r\n\r\n}\r\n\r\nfunction convertCovidData (data){\r\n    console.log('dbg covid data', data, getCurrentDate())\r\n    if(data.error)\r\n        return 'I apologize, there is no data for today yet, try again later...'\r\n    const today = data.dates[getCurrentDate()].countries.Estonia    \r\n    return {\r\n        new:today.today_new_confirmed, \r\n        died: today.today_new_deaths,\r\n        recovered:today.today_new_recovered \r\n    }\r\n}\r\n\r\nexport const convertDataToWisdom = (topic, data) => {\r\n    console.log('dbg data to wisdom', topic, data);\r\n    switch(topic){\r\n        case enumTopics.JOKE:\r\n            const joke = data.type === 'single' ? data.joke : data.setup + ' ' + data.delivery;\r\n            return new Wisdom(joke, wisdomFormat.TEXT);\r\n\r\n        case enumTopics.QUOTE:\r\n            return new Wisdom((`${data.en} - ${data.author}`), wisdomFormat.TEXT);\r\n    \r\n\r\n        case enumTopics.FACTS:\r\n            return new Wisdom(data.text, wisdomFormat.TEXT);\r\n\r\n        case enumTopics.CATS:\r\n            return new Wisdom(data.data[0], wisdomFormat.TEXT);\r\n\r\n        case enumTopics.CAT_IMG:\r\n            return new Wisdom(data.file, wisdomFormat.IMAGE);\r\n\r\n        case enumTopics.COVID:\r\n            return new Wisdom(convertCovidData(data), wisdomFormat.COVID_TEXT);\r\n\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {wisdomFormat} from '../topics';\r\n\r\n\r\nlet SHOW_LOADER = false;\r\nconst SpeechBubble = ({content = {}, isWaiting, isLoaded, onResourceLoaded}) => { //destructing\r\n    let className = \"bubble chat-box br4 pa3 bg-white shadow-3\"   \r\n\r\n    if(content.data){\r\n        switch (content.format){\r\n            case wisdomFormat.INITIAL:\r\n                return(\r\n                    <div className={className}>\r\n                        <p>Hi stranger!<br/>My name is <strong>{content.data}</strong> and I'm honored to be your host today.<br/> How can I entertain you ?</p>\r\n                    </div>  \r\n                )\r\n            case  wisdomFormat.COVID_TEXT:\r\n                if(isWaiting){\r\n                    className += \" scale-out-center\"\r\n                }  else{\r\n                    className += \" scale-up-center\"\r\n                }\r\n                return(\r\n                    <div className={className}>\r\n                        <p>Let me share my <strong>COVID-19 😷</strong> stats  with you ...<br/>(As of today, in Estonia)\r\n                            <br/>\r\n                            <br/><strong>{content.data.new}</strong> new cases confirmed 🚀\r\n                            <br/><strong>{content.data.died}</strong> people died 🙏\r\n                            <br/><strong>{content.data.recovered}</strong> people recovered 👍\r\n                        </p>\r\n                    </div>\r\n                )\r\n\r\n            case wisdomFormat.TEXT:\r\n                if(isWaiting){\r\n                    className += \" scale-out-center\"\r\n                }  else{\r\n                    className += \" scale-up-center\"\r\n                }\r\n                return(\r\n                    <div className={className}>\r\n                        <p>{content.data}</p>\r\n                    </div>\r\n                )\r\n\r\n            case wisdomFormat.IMAGE:\r\n                let classNameLoader = \"loader-container\"\r\n                let classNameImg = \"bubble-img shadow-3\"\r\n\r\n                if(isLoaded){\r\n                    SHOW_LOADER = false;\r\n                    classNameImg += \" swing-in-bottom-fwd\";\r\n                }\r\n                else{\r\n                    SHOW_LOADER = true;\r\n                }\r\n                if (SHOW_LOADER){\r\n                    console.log(\"dbg loader show\");  \r\n                    classNameLoader += \" show\";\r\n                    classNameImg += \" swing-out-bottom-bck\";\r\n                }\r\n                return(\r\n                    <div className=\"bubble-img-container\">\r\n                        <img className={classNameImg} src={content.data} onLoad={onResourceLoaded}/>\r\n                        <div className={classNameLoader}>\r\n                            <div className=\"loader\"></div>\r\n                        </div>\r\n                    </div>                    \r\n                )\r\n            default:\r\n                return(\r\n                    <div className={className}>\r\n                        <p>{\"Oops, something went wrong!\"}</p>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n    else {  // return default\r\n        return(\r\n            <div className={className}>\r\n                <p>...</p>\r\n            </div>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default SpeechBubble;\r\n","import React from 'react';\r\nimport SpeechBubble from './SpeechBubble';\r\n\r\nconst Barman = ({id}) => { //destructing\r\n    return(\r\n        <div className=\"tc\">\r\n            <img className=\"barman\" alt='avatar' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div className=\"bar-top\">\r\n                <div className=\"beer\"></div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Barman;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }    \r\n}\r\nexport default ErrorBoundry;","import { \r\n    REQUEST_USERS_PENDING,\r\n    REQUEST_USERS_SUCCESS,\r\n    REQUEST_USERS_FAILED,\r\n    REQUEST_TOPIC_PENDING,\r\n    REQUEST_TOPIC_SUCCESS,\r\n    REQUEST_TOPIC_FAILED,\r\n    RESOURCE_LOADED,\r\n    INITIAL_TOPIC\r\n} from './constants'\r\nimport {getUriForTopic, convertDataToWisdom, initTopic} from './topics'\r\n\r\nconst randomUser = (data) => {\r\n    const user = data[Math.floor(Math.random() * data.length)]\r\n    return {id:user.id, name:user.name}\r\n\r\n}\r\n\r\n// Thunk is looking for a function instead of an action(object)\r\n// The inner function receives the store methods dispatch and getState as parameters.\r\nexport const requestUsers = () => (dispatch) => {\r\n    dispatch({type: REQUEST_USERS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const user = randomUser(data);\r\n            dispatch({type:REQUEST_USERS_SUCCESS, payload:user});\r\n            dispatch({type:INITIAL_TOPIC, payload:initTopic(user.name)})\r\n        })\r\n        .catch(error => dispatch({type:REQUEST_USERS_FAILED, payload:error}))\r\n}\r\n\r\nexport const requestWisdom = (topic) => (dispatch) => {\r\n    dispatch({type: REQUEST_TOPIC_PENDING});\r\n    dispatch({type: 'RESOURCE_LOADING'});\r\n    fetch(getUriForTopic(topic))\r\n        .then(response => response.json())\r\n        .then(data => convertDataToWisdom(topic, data))\r\n        .then(data => {\r\n            dispatch({type:REQUEST_TOPIC_SUCCESS, payload:data})\r\n        })\r\n        .catch(error => dispatch({type:REQUEST_TOPIC_FAILED, payload:error}))\r\n}\r\n\r\n","export const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\r\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\r\nexport const REQUEST_USERS_FAILED = 'REQUEST_USERS_FAILED';\r\n\r\nexport const REQUEST_TOPIC_PENDING = 'REQUEST_TOPIC_PENDING';\r\nexport const REQUEST_TOPIC_SUCCESS = 'REQUEST_TOPIC_SUCCESS';\r\nexport const REQUEST_TOPIC_FAILED = 'REQUEST_TOPIC_FAILED';\r\nexport const INITIAL_TOPIC = 'INITIAL_TOPIC';\r\n\r\nexport const RESOURCE_LOADED = 'RESOURCE_LOADED';","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport Buttons from '../components/Buttons';\r\nimport Barman from '../components/Barman';\r\nimport SpeechBubble from '../components/SpeechBubble';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\nimport {topics} from '../topics'\r\nimport { requestUsers, requestWisdom } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    console.log('dbg mapStateToProps', state)\r\n    return {\r\n        user: state.requestUsers.user,\r\n        isPending: state.requestUsers.isPending,\r\n        error: state.requestUsers.error,\r\n        wisdom: state.requestWisdom.wisdom,\r\n        isWaiting: state.requestWisdom.isWaiting,\r\n        isLoaded: state.resourceLoaded.isLoaded\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRequestUsers: () => dispatch(requestUsers()),\r\n        onRequestWisdom: params => dispatch(requestWisdom(params)),\r\n        onResourceLoaded: () => dispatch({type: 'RESOURCE_LOADED'})\r\n    }\r\n}\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestUsers()        \r\n    }\r\n\r\n\r\n    render(){\r\n        const { user, isPending, onRequestWisdom, wisdom, isWaiting, onResourceLoaded, isLoaded } = this.props;\r\n        return (isPending || !user) ?\r\n            <h1 className='tc'>Loading...</h1> :\r\n            (\r\n                <div className='tc '>\r\n                    <h1 className='f1'>API-bar</h1>\r\n                    <div className=\"tc bg-light-green br3 pa3 ma2 bw2 shadow-5\">\r\n                        <ErrorBoundry>\r\n                        <SpeechBubble content={wisdom} isWaiting={isWaiting} isLoaded={isLoaded} onResourceLoaded={onResourceLoaded} />\r\n                        <Barman id={user.id} />\r\n                        </ErrorBoundry>\r\n                    </div>   \r\n                    <Buttons \r\n                        buttons={topics}\r\n                        onClick={onRequestWisdom} \r\n                    />             \r\n                    \r\n                </div>\r\n            )\r\n        \r\n\r\n    }\r\n}\r\n\r\n// Connecting App to redux Store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    REQUEST_USERS_PENDING,\r\n    REQUEST_USERS_SUCCESS,\r\n    REQUEST_USERS_FAILED,\r\n    REQUEST_TOPIC_PENDING,\r\n    REQUEST_TOPIC_SUCCESS,\r\n    REQUEST_TOPIC_FAILED,\r\n    INITIAL_TOPIC\r\n\r\n} from './constants'\r\n\r\nconst initialStateUser = {\r\n    isPending: false,\r\n    user: null,\r\n    error: '',\r\n}\r\n\r\nexport const requestUsers = (state = initialStateUser, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_USERS_PENDING:\r\n            return Object.assign({}, state, {isPending:true});\r\n\r\n        case REQUEST_USERS_SUCCESS:\r\n            return Object.assign({}, state, {user: action.payload, isPending: false});\r\n\r\n        case REQUEST_USERS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateWisdom = {\r\n    isWaiting: false,\r\n    wisdom: '',\r\n    error: ''\r\n}\r\n\r\nexport const requestWisdom = (state = initialStateWisdom, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_TOPIC_PENDING:\r\n            return Object.assign({}, state, {isWaiting:true});\r\n        case INITIAL_TOPIC:\r\n            return Object.assign({}, state, {wisdom: action.payload, isWaiting: false});\r\n        case REQUEST_TOPIC_SUCCESS:\r\n            return Object.assign({}, state, {wisdom: action.payload, isWaiting: false});\r\n\r\n        case REQUEST_TOPIC_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isWaiting: false});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst initialLoaded = {\r\n    isLoaded: false\r\n}\r\n\r\nexport const resourceLoaded = (state = initialLoaded, action = {}) => {\r\n    switch(action.type){\r\n        case 'RESOURCE_LOADED':\r\n            return Object.assign({}, state, {isLoaded:true});\r\n        case 'RESOURCE_LOADING':\r\n            return Object.assign({}, state, {isLoaded:false});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { requestWisdom, requestUsers, resourceLoaded } from './reducers'\nimport 'tachyons';\n\n// create logging middleware\nconst logger = createLogger();\n\n//combine reducers\nconst rootReducer = combineReducers({ requestWisdom, requestUsers, resourceLoaded})\n\n// store holds state tree of the application\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  // Provider takes care of providing the store to all components in the tree\n  <Provider store={store}>\n    <App/>\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}